import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType

plugins {
    alias libs.plugins.com.android.library
    alias libs.plugins.org.jetbrains.kotlin.multiplatform
    alias libs.plugins.org.jetbrains.kotlin.plugin.serialization
    alias libs.plugins.org.jetbrains.kotlinx.atomicfu
    alias libs.plugins.org.jetbrains.kotlinx.binary.compatibility.validator
    alias libs.plugins.org.jetbrains.kotlinx.kover
}

apply from: layout.settingsDirectory.file("gradle/publish.gradle")

kotlin {
    explicitApi()

    // desktop
    jvm("desktop") {
        compilerOptions.jvmTarget = JvmTarget.JVM_11
    }

    // android
    androidTarget {
        publishLibraryVariants("release")
        compilerOptions.jvmTarget = JvmTarget.JVM_11
    }

    // ios
    iosX64()
    iosArm64()
    iosSimulatorArm64()

    // linux
    linuxX64()
    linuxArm64()

    // macos
    macosX64()
    macosArm64()

    sourceSets {
        commonMain.dependencies {
            implementation project(":auto-mutton-recipe")
            implementation libs.androidx.lifecycle.viewmodel.savedstate
        }
        commonTest.dependencies {
            implementation libs.app.cash.turbine
            implementation libs.com.willowtreeapps.assertk
            implementation libs.org.jetbrains.kotlin.test
            implementation libs.org.jetbrains.kotlin.reflect
            implementation libs.org.jetbrains.kotlinx.coroutine.test
        }

        androidUnitTest.dependencies {
            implementation libs.androidx.test.core
            implementation libs.androidx.test.ext.junit
            implementation libs.androidx.test.rules
            implementation libs.androidx.test.runner
            implementation libs.org.robolectric.robolectric
        }

        nonJvmTest {
            dependsOn(commonTest)
        }
    }

    sourceSets.matching { it.name.endsWith("Test") }.configureEach {
        compilerOptions.optIn = [
            'kotlinx.coroutines.DelicateCoroutinesApi',
            'kotlinx.coroutines.InternalCoroutinesApi',
            'kotlinx.coroutines.ExperimentalCoroutinesApi'
        ]
    }

    targets.each { target ->
        if (target.platformType == KotlinPlatformType.common) return
        if (target.platformType == KotlinPlatformType.androidJvm) return
        if (target.platformType == KotlinPlatformType.js) return
        if (target.platformType == KotlinPlatformType.wasm) return
        if (target.platformType != KotlinPlatformType.jvm) {
            target.compilations.test.defaultSourceSet.dependsOn(sourceSets.nonJvmTest)
        }
    }
}

android {
    namespace = "io.github.ryunen344.mutton.savedstate"
    compileSdk = 36
    defaultConfig {
        minSdk = 21
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true
        consumerProguardFile "consumer-rules.pro"
    }
    buildTypes {
        release {
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    packaging.resources.excludes += "/META-INF/{AL2.0,LGPL2.1}"
    lint {
        checkReleaseBuilds = false
        sarifReport = true
    }
    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all { test ->
            test.systemProperty("robolectric.logging", "stdout")
            test.systemProperty("robolectric.logging.enabled", "true")
            test.systemProperty("robolectric.graphicsMode", "NATIVE")
            test.testLogging.showStandardStreams = true
        }
    }
}

androidComponents {
    beforeVariants(selector().withName("release")) { variantBuilder ->
        variantBuilder.enableAndroidTest = false
        variantBuilder.enableUnitTest = false
        variantBuilder.enableTestFixtures = false
    }
}

apiValidation {
    klib.enabled = true
}
