import io.gitlab.arturbosch.detekt.Detekt
import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.dokka.gradle.DokkaTaskPartial
import org.jetbrains.dokka.gradle.GradleDokkaSourceSetBuilder

plugins {
    alias libs.plugins.com.android.library apply false
    alias libs.plugins.org.jetbrains.kotlin.android apply false
    alias libs.plugins.org.jetbrains.kotlin.multiplatform apply false
    alias libs.plugins.org.jetbrains.kotlin.plugin.compose apply false
    alias libs.plugins.com.vanniktech.maven.publish apply false
    alias libs.plugins.org.jetbrains.dokka
    alias libs.plugins.io.gitlab.arturbosch.detekt
    alias libs.plugins.nl.littlerobots.version.catalog.update
}

apply from: rootProject.layout.projectDirectory.file("gradle/resolve-all-dependencies.gradle")

tasks.register('cleanLocalMaven', Delete) {
    group = LifecycleBasePlugin.BUILD_GROUP
    delete(rootProject.layout.projectDirectory.dir("releases"))
}

detekt {
    parallel = true
    autoCorrect = project.providers.gradleProperty("autoCorrect").present
    config.from = rootProject.layout.projectDirectory.file(".lint/detekt.yml")
    source.from = rootProject.layout.projectDirectory.asFileTree.matching {
        include("**/*.kt", "**/*.kts")
        exclude("**/build/")
    }
    baseline = rootProject.layout.projectDirectory.file(".lint/baseline.xml").asFile
}

tasks.withType(Detekt).configureEach {
    jvmTarget = libs.versions.jdk.get()
}

dependencies {
    detektPlugins(libs.io.gitlab.arturbosch.detekt.formatting)
}

allprojects {
    group = "io.github.ryunen344.mutton"
    version = providers.fileContents(rootProject.layout.projectDirectory.file("version.txt")).asText.getOrElse("snapshot").trim()
}

subprojects { project ->
    project.plugins.apply(libs.plugins.org.jetbrains.dokka.get().pluginId)
    def action = new Action<GradleDokkaSourceSetBuilder>() {
        @Override
        void execute(GradleDokkaSourceSetBuilder builder) {
            // later, enable module markdown
            //includes.from("README.md")
            builder.perPackageOption {
                matchingRegex.set(".*\\.samples(|\\..*)")
                suppress.set(true)
            }

            builder.samples.from(project.layout.projectDirectory.files("samples/src/main/kotlin").asFileTree)
        }
    }

    project.tasks.withType(DokkaTask).configureEach {
        dokkaSourceSets.configureEach(action)
    }

    project.tasks.withType(DokkaTaskPartial).configureEach {
        dokkaSourceSets.configureEach(action)
    }
}

tasks.named("dokkaHtmlMultiModule") {
    // module that has samples
    dependsOn(":auto-mutton-recipe-compose:dokkaHtmlMultiModule")
}

versionCatalogUpdate {
    sortByKey = true
    keep {
        keepUnusedVersions = true
    }
}
